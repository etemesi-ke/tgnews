// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/server_files.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ProtoFile {
    // message fields
    pub title: ::std::string::String,
    pub file_name: ::std::string::String,
    pub url: ::std::string::String,
    pub date_published: i64,
    pub category: Category,
    pub language: Language,
    pub accuracy: f32,
    pub gb_rating: f32,
    pub ru_rating: f32,
    pub us_rating: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProtoFile {
    fn default() -> &'a ProtoFile {
        <ProtoFile as ::protobuf::Message>::default_instance()
    }
}

impl ProtoFile {
    pub fn new() -> ProtoFile {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string file_name = 2;


    pub fn get_file_name(&self) -> &str {
        &self.file_name
    }
    pub fn clear_file_name(&mut self) {
        self.file_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        &mut self.file_name
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.file_name, ::std::string::String::new())
    }

    // string url = 3;


    pub fn get_url(&self) -> &str {
        &self.url
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }

    // int64 date_published = 4;


    pub fn get_date_published(&self) -> i64 {
        self.date_published
    }
    pub fn clear_date_published(&mut self) {
        self.date_published = 0;
    }

    // Param is passed by value, moved
    pub fn set_date_published(&mut self, v: i64) {
        self.date_published = v;
    }

    // .ServerFiles.Category category = 5;


    pub fn get_category(&self) -> Category {
        self.category
    }
    pub fn clear_category(&mut self) {
        self.category = Category::Society;
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: Category) {
        self.category = v;
    }

    // .ServerFiles.Language language = 6;


    pub fn get_language(&self) -> Language {
        self.language
    }
    pub fn clear_language(&mut self) {
        self.language = Language::Eng;
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: Language) {
        self.language = v;
    }

    // float accuracy = 7;


    pub fn get_accuracy(&self) -> f32 {
        self.accuracy
    }
    pub fn clear_accuracy(&mut self) {
        self.accuracy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accuracy(&mut self, v: f32) {
        self.accuracy = v;
    }

    // float gb_rating = 8;


    pub fn get_gb_rating(&self) -> f32 {
        self.gb_rating
    }
    pub fn clear_gb_rating(&mut self) {
        self.gb_rating = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gb_rating(&mut self, v: f32) {
        self.gb_rating = v;
    }

    // float ru_rating = 9;


    pub fn get_ru_rating(&self) -> f32 {
        self.ru_rating
    }
    pub fn clear_ru_rating(&mut self) {
        self.ru_rating = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ru_rating(&mut self, v: f32) {
        self.ru_rating = v;
    }

    // float us_rating = 10;


    pub fn get_us_rating(&self) -> f32 {
        self.us_rating
    }
    pub fn clear_us_rating(&mut self) {
        self.us_rating = 0.;
    }

    // Param is passed by value, moved
    pub fn set_us_rating(&mut self, v: f32) {
        self.us_rating = v;
    }
}

impl ::protobuf::Message for ProtoFile {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.file_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.date_published = tmp;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.category, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.language, 6, &mut self.unknown_fields)?
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.accuracy = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gb_rating = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.ru_rating = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.us_rating = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.file_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.file_name);
        }
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.url);
        }
        if self.date_published != 0 {
            my_size += ::protobuf::rt::value_size(4, self.date_published, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.category != Category::Society {
            my_size += ::protobuf::rt::enum_size(5, self.category);
        }
        if self.language != Language::Eng {
            my_size += ::protobuf::rt::enum_size(6, self.language);
        }
        if self.accuracy != 0. {
            my_size += 5;
        }
        if self.gb_rating != 0. {
            my_size += 5;
        }
        if self.ru_rating != 0. {
            my_size += 5;
        }
        if self.us_rating != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.file_name.is_empty() {
            os.write_string(2, &self.file_name)?;
        }
        if !self.url.is_empty() {
            os.write_string(3, &self.url)?;
        }
        if self.date_published != 0 {
            os.write_int64(4, self.date_published)?;
        }
        if self.category != Category::Society {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.category))?;
        }
        if self.language != Language::Eng {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.language))?;
        }
        if self.accuracy != 0. {
            os.write_float(7, self.accuracy)?;
        }
        if self.gb_rating != 0. {
            os.write_float(8, self.gb_rating)?;
        }
        if self.ru_rating != 0. {
            os.write_float(9, self.ru_rating)?;
        }
        if self.us_rating != 0. {
            os.write_float(10, self.us_rating)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProtoFile {
        ProtoFile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &ProtoFile| { &m.title },
                |m: &mut ProtoFile| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "file_name",
                |m: &ProtoFile| { &m.file_name },
                |m: &mut ProtoFile| { &mut m.file_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "url",
                |m: &ProtoFile| { &m.url },
                |m: &mut ProtoFile| { &mut m.url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "date_published",
                |m: &ProtoFile| { &m.date_published },
                |m: &mut ProtoFile| { &mut m.date_published },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Category>>(
                "category",
                |m: &ProtoFile| { &m.category },
                |m: &mut ProtoFile| { &mut m.category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Language>>(
                "language",
                |m: &ProtoFile| { &m.language },
                |m: &mut ProtoFile| { &mut m.language },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "accuracy",
                |m: &ProtoFile| { &m.accuracy },
                |m: &mut ProtoFile| { &mut m.accuracy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gb_rating",
                |m: &ProtoFile| { &m.gb_rating },
                |m: &mut ProtoFile| { &mut m.gb_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "ru_rating",
                |m: &ProtoFile| { &m.ru_rating },
                |m: &mut ProtoFile| { &mut m.ru_rating },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "us_rating",
                |m: &ProtoFile| { &m.us_rating },
                |m: &mut ProtoFile| { &mut m.us_rating },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProtoFile>(
                "ProtoFile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProtoFile {
        static instance: ::protobuf::rt::LazyV2<ProtoFile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProtoFile::new)
    }
}

impl ::protobuf::Clear for ProtoFile {
    fn clear(&mut self) {
        self.title.clear();
        self.file_name.clear();
        self.url.clear();
        self.date_published = 0;
        self.category = Category::Society;
        self.language = Language::Eng;
        self.accuracy = 0.;
        self.gb_rating = 0.;
        self.ru_rating = 0.;
        self.us_rating = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProtoFile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtoFile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Language {
    Eng = 0,
    Rus = 1,
}

impl ::protobuf::ProtobufEnum for Language {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Language> {
        match value {
            0 => ::std::option::Option::Some(Language::Eng),
            1 => ::std::option::Option::Some(Language::Rus),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Language] = &[
            Language::Eng,
            Language::Rus,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Language>("Language", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Language {
}

impl ::std::default::Default for Language {
    fn default() -> Self {
        Language::Eng
    }
}

impl ::protobuf::reflect::ProtobufValue for Language {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Category {
    Society = 0,
    Economy = 1,
    Technology = 2,
    Entertainment = 3,
    Sports = 4,
    Science = 5,
    Other = 6,
}

impl ::protobuf::ProtobufEnum for Category {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Category> {
        match value {
            0 => ::std::option::Option::Some(Category::Society),
            1 => ::std::option::Option::Some(Category::Economy),
            2 => ::std::option::Option::Some(Category::Technology),
            3 => ::std::option::Option::Some(Category::Entertainment),
            4 => ::std::option::Option::Some(Category::Sports),
            5 => ::std::option::Option::Some(Category::Science),
            6 => ::std::option::Option::Some(Category::Other),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Category] = &[
            Category::Society,
            Category::Economy,
            Category::Technology,
            Category::Entertainment,
            Category::Sports,
            Category::Science,
            Category::Other,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Category>("Category", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Category {
}

impl ::std::default::Default for Category {
    fn default() -> Self {
        Category::Society
    }
}

impl ::protobuf::reflect::ProtobufValue for Category {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19protos/server_files.proto\x12\x0bServerFiles\"\xd0\x02\n\tProtoFil\
    e\x12\x14\n\x05title\x18\x01\x20\x01(\tR\x05title\x12\x1b\n\tfile_name\
    \x18\x02\x20\x01(\tR\x08fileName\x12\x10\n\x03url\x18\x03\x20\x01(\tR\
    \x03url\x12%\n\x0edate_published\x18\x04\x20\x01(\x03R\rdatePublished\
    \x121\n\x08category\x18\x05\x20\x01(\x0e2\x15.ServerFiles.CategoryR\x08c\
    ategory\x121\n\x08language\x18\x06\x20\x01(\x0e2\x15.ServerFiles.Languag\
    eR\x08language\x12\x1a\n\x08accuracy\x18\x07\x20\x01(\x02R\x08accuracy\
    \x12\x1b\n\tgb_rating\x18\x08\x20\x01(\x02R\x08gbRating\x12\x1b\n\tru_ra\
    ting\x18\t\x20\x01(\x02R\x08ruRating\x12\x1b\n\tus_rating\x18\n\x20\x01(\
    \x02R\x08usRating*\x1c\n\x08Language\x12\x07\n\x03Eng\x10\0\x12\x07\n\
    \x03Rus\x10\x01*k\n\x08Category\x12\x0b\n\x07Society\x10\0\x12\x0b\n\x07\
    Economy\x10\x01\x12\x0e\n\nTechnology\x10\x02\x12\x11\n\rEntertainment\
    \x10\x03\x12\n\n\x06Sports\x10\x04\x12\x0b\n\x07Science\x10\x05\x12\t\n\
    \x05Other\x10\x06b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
